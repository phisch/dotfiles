#!/usr/bin/env python3
import os

import archinstall
import logging

user = 'phisch'

DEPENDENCIES = {
    'default': {
        'official': [
            'alacritty', 'baobab', 'bluez', 'bluez-utils', 'bspwm', 'chromium', 'curl', 'discord', 'docker',
            'docker-compose', 'eog', 'feh', 'foliate', 'font-manager', 'git', 'gnome-calculator', 'gnome-disk-utility',
            'gnome-keyring', 'iwd', 'libsecret', 'linux-headers', 'maim', 'man-db', 'mkcert', 'nano', 'nautilus',
            'openssh', 'polkit', 'polkit-gnome', 'rofi', 'sxhkd', 'ttf-dejavu', 'ttf-jetbrains-mono', 'ttf-joypixels',
            'vlc', 'wmname', 'xclip', 'xdg-user-dirs', 'xorg-server', 'xorg-xinit', 'xorg-xrandr', 'xorg-xsetroot',
            'zsh', 'picom', 'pipewire', 'pipewire-alsa', 'pipewire-jack', 'pipewire-media-session', 'pipewire-pulse',
            'polybar', 'gst-plugin-pipewire', 'libpulse', 'helvum'
        ],
        'aur': [
            'figma-linux', 'giph', 'phocus-gtk-theme-git', 'ttf-material-design-icons-git', 'visual-studio-code-bin'
        ]
    },
    'tower': {
        'official': ['dkms'],
        'aur': ['rtl88xxau-aircrack-dkms-git']
    },
    'laptop': {
        'official': ['acpilight', 'xf86-video-intel'],
        'aur': []
    }
}

archinstall.set_keyboard_language('de-latin1-nodeadkeys')

disk = archinstall.generic_select(
    archinstall.all_disks(),
    input_text="Select block device for installation:",
    allow_empty_input=False
)

disk_layouts = {
    disk.path: {
        "partitions": [
            {
                "boot": True,
                "filesystem": {
                    "format": "fat32"
                },
                "format": True,
                "mountpoint": "/boot",
                "size": "512MB",
                "start": "0MB"
            },
            {
                "btrfs": {
                    "subvolumes": {
                        "@": "/",
                        "@.snapshots": "/.snapshots",
                        "@home": "/home",
                        "@var": "/var",
                        "@pkgs": "/var/cache/pacman/pkg"
                    }
                },
                "filesystem": {
                    "format": "btrfs"
                },
                "format": True,
                "mountpoint": "/",
                "start": "512MB"
            }
        ],
        "wipe": True
    }
}

variant = archinstall.generic_select(
    list(DEPENDENCIES.keys())[1:],
    'Select variant (default: {}):'.format(list(DEPENDENCIES.keys())[1:][0])
) or list(DEPENDENCIES.keys())[1:][0]

dependencies = DEPENDENCIES.get('default', {}).get('official', []) + DEPENDENCIES.get(variant, {}).get('official', [])
dependencies_aur = DEPENDENCIES.get('default', {}).get('aur', []) + DEPENDENCIES.get(variant, {}).get('aur', [])

input(f"About to install {variant} variant to {disk.path}. Press return to confirm!")

with archinstall.Filesystem(disk, archinstall.GPT) as fs:
    fs.load_layout(disk_layouts.get(disk.path))

with archinstall.Installer('/mnt') as i:
    i.mount_ordered_layout(disk_layouts)

    mirror_regions = { 'Germany': archinstall.list_mirrors().get('Germany') }
    archinstall.use_mirrors(mirror_regions)

    if variant == 'laptop':
        i.MODULES.append('i915')

    i.minimal_installation(False, True)
    i.set_mirrors(mirror_regions)

    i.set_hostname(variant)

    i.add_bootloader('systemd-bootctl')
    i.setup_swap('zram')
    i.copy_iso_network_config(True)
    i.enable_periodic_trim()

    i.arch_chroot(r"sed -i 's/#\(Color\)/\1/' /etc/pacman.conf")
    i.add_additional_packages(dependencies)

    i.set_locale('en_US', 'UTF-8')
    i.set_keyboard_language('de')
    i.set_timezone('Europe/Berlin')

    i.user_set_pw('root', 'root')
    i.user_create(user, user, ['video', 'docker'], True)
    i.user_set_shell(user, '/usr/bin/zsh')

    i.arch_chroot(f"su {user} -c 'xdg-user-dirs-update'")
    i.arch_chroot(f"su {user} -c 'mkdir -p ~/Pictures/screenshots && mkdir ~/Videos/recordings'")
    
    i.enable_service('iwd', 'docker', 'bluetooth')
    i.activate_time_syncronization()

    i.arch_chroot(r"sed -i 's/[#]*\(AutoEnable=\)\(true\|false\)/\1true/' /etc/bluetooth/main.conf")

    autologin_file_name = f'{i.target}/etc/systemd/system/getty@tty1.service.d/autologin.conf'
    os.makedirs(os.path.dirname(autologin_file_name), exist_ok=True)
    with open(autologin_file_name, "w") as file:
        file.write(f'[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin {user} --noclear %I $TERM')

    if variant == 'laptop':
        i.arch_chroot(r"sed -i 's/\(FONT=\).*/\1TER16x32/' /etc/vconsole.conf")
        i.create_file("/etc/X11/xorg.conf.d/20-intel.conf").write((
            'Section "Device"\n'
            '  Identifier "Intel Graphics"\n'
            '  Driver "intel"\n'
            '  Option "TripleBuffer" "true"\n'
            '  Option "TearFree" "true"\n'
            'EndSection'
        ))

    i.arch_chroot(f"su {user} -c 'cd $(mktemp -d) && git clone https://github.com/phisch/dotfiles.git . && cp -rb . ~'")

    i.arch_chroot(r"sed -i 's/#\(MAKEFLAGS=\).*/\1\"-j$(($(nproc)-2))\"/' /etc/makepkg.conf")
    i.arch_chroot(r"sed -i 's/# \(%wheel ALL=(ALL) NOPASSWD: ALL\)/\1/' /etc/sudoers")
    i.log(i.arch_chroot(f"su {user} -c 'cd $(mktemp -d) && git clone https://aur.archlinux.org/paru-bin.git . && makepkg -sim --noconfirm'"), level=logging.INFO)
    i.log(i.arch_chroot(f'su {user} -c "paru -Sy --nosudoloop --needed --noconfirm {" ".join(dependencies_aur)}"'), level=logging.INFO)
    i.arch_chroot(r"sed -i 's/\(%wheel ALL=(ALL) NOPASSWD: ALL\)/# \1/' /etc/sudoers")