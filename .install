#!/usr/bin/env python3
import getpass
import os

import archinstall
import requests

KEYMAP = 'de'
LOCALE = 'en_US'
ENCODING = 'UTF-8'
TIMEZONE = 'Europe/Berlin'
DOWNLOAD_REGION = 'Germany'
DEFAULT_USER = 'phisch'

dependencies = [
    'acpilight', 'baobab', 'bluez', 'bluez-utils', 'bspwm', 'code', 'curl',
    'discord', 'dkms', 'docker', 'docker-compose', 'eog', 'evince', 'feh',
    'foliate', 'git', 'gnome-calculator', 'gnome-disk-utility', 'intel-ucode',
    'linux-headers', 'maim', 'man-db', 'nautilus', 'openssh', 'pavucontrol',
    'pulseaudio', 'pulseaudio-bluetooth', 'reflector', 'rofi', 'sxhkd',
    'termite', 'ttf-dejavu', 'vlc', 'wmname', 'xclip', 'xdg-user-dirs',
    'xorg-server', 'xorg-xinit', 'xorg-xrandr', 'xorg-xsetroot', 'zsh'
]
dependencies_aur = [
    'figma-linux', 'font-manager', 'giph', 'google-chrome-dev',
    'jetbrains-toolbox', 'phocus-gtk-theme-git', 'picom-git', 'polybar',
    'rtl88xxau-aircrack-dkms-git', 'ttf-material-design-icons-git'
]


def get_password(name='Password', default=None):
    while password := getpass.getpass(f'{name}{f" (default: {default})" if default is not None else ""}: '):
        if password == getpass.getpass('Repeat to confirm: '):
            break
        archinstall.log("Passwords didn't match. Try again!", fg='red')
    return password or default


try:
    archinstall.sys_command(f'umount -R /mnt', suppress_errors=True)

    archinstall.set_keyboard_language(KEYMAP)
    archinstall.validate_package_list(dependencies)

    disk = archinstall.select_disk(archinstall.all_disks())
    # TODO: remove this once it is set by detault in archinstall
    disk.keep_partitions = False
    hostname = archinstall.generic_select(['tower', 'laptop'], 'Select hostname (default: tower):') or 'tower'
    root_password = get_password('Root password', 'root')
    user = input(f'Username (default: {DEFAULT_USER}): ') or DEFAULT_USER
    user_password = get_password(default=user)

    while github_access_token := input('Github Access Token (default: none): '):
        response = requests.post(
            url='https://api.github.com/',
            headers={'Authorization': f'token {github_access_token}'}
        )
        if response.status_code == 401 or 'admin:public_key' not in response.headers.get('X-OAuth-Scopes'):
            archinstall.log("Token invalid or doesn't have the 'admin:public_key' scope. Try again!", fg='red')
            continue
        break

    input('No more input required. Press return to start the installation.')

    with archinstall.Filesystem(disk, archinstall.GPT) as fs:
        fs.use_entire_disk('btrfs')
        disk.partition[0].format('fat32')
        disk.partition[1].format('btrfs')

        with archinstall.Installer(disk.partition[1], disk.partition[0], hostname=hostname) as i:
            mirror_regions = {DOWNLOAD_REGION: archinstall.list_mirrors().get(DOWNLOAD_REGION)}
            archinstall.use_mirrors(mirror_regions)

            i.minimal_installation()
            i.set_mirrors(mirror_regions)
            i.add_bootloader()
            # TODO: add `initrd /intel-ucode.img` to `/boot/loader/entries/ENTRYFILE.conf` BEFORE `initrd /initramfs-linux.img`
            # this currently can't be done because archinstall doesn't return the entryfile
            i.copy_ISO_network_config(enable_services=True)
            i.arch_chroot(r"ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf")

            i.arch_chroot(r"sed -i \"/\[multilib\]/,/Include/\"'s/^#//' /etc/pacman.conf")
            i.arch_chroot(r"sed -i 's/#\(Color\)/\1/' /etc/pacman.conf")
            i.add_additional_packages(dependencies)

            i.set_locale(LOCALE, ENCODING)
            i.set_keyboard_language(KEYMAP)
            i.set_timezone(TIMEZONE)

            i.user_set_pw('root', root_password)
            i.arch_chroot(r"sed -i 's/# \(%wheel ALL=(ALL) ALL\)/\1/' /etc/sudoers")

            i.user_create(user, user_password, ['video', 'docker'])
            i.arch_chroot(f'chsh -s /usr/bin/zsh "{user}"')

            i.arch_chroot(f"su {user} -c 'xdg-user-dirs-update'")
            i.arch_chroot(f"su {user} -c 'mkdir -p ~/Pictures/screenshots && mkdir ~/Videos/recordings'")

            i.enable_service('systemd-timesyncd')
            i.enable_service('docker')
            i.enable_service('bluetooth')

            i.arch_chroot(r"sed 's/[#]*\(AutoEnable=\)\(true\|false\)/\1true/' /etc/bluetooth/main.conf")

            backlight_rule_file_name = f'{i.mountpoint}/etc/udev/rules.d/backlight.rules'
            with open(backlight_rule_file_name, 'w+') as file:
                file.write('ACTION=="add", SUBSYSTEM=="backlight", GROUP="video"')
                os.chmod(backlight_rule_file_name, 0o664)

            autologin_file_name = f'{i.mountpoint}/etc/systemd/system/getty@tty1.service.d/autologin.conf'
            os.makedirs(os.path.dirname(autologin_file_name), exist_ok=True)
            with open(autologin_file_name, "w") as file:
                file.write(f'[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin {user} --noclear %I $TERM')

            if hostname == 'laptop':
                i.arch_chroot(r"sed -i 's/\(FONT=\).*/\1TER16x32/' /etc/vconsole.conf")

            i.arch_chroot(f"su {user} -c 'ssh-keygen -t rsa -b 4096 -C \"{user}@{hostname}\" -f ~/.ssh/id_rsa -N \"\"'")
            i.arch_chroot(f"su {user} -c 'ssh-keyscan github.com >> ~/.ssh/known_hosts'")

            if github_access_token:
                with open(f'{i.mountpoint}/home/{user}/.ssh/id_rsa.pub', 'r') as key:
                    requests.post(
                        url='https://api.github.com/user/keys',
                        json={'title': f'{user}@{hostname}', 'key': f'{key.read().strip()}'},
                        headers={'Authorization': f'token {github_access_token}'}
                    )

            i.arch_chroot(f"su {user} -c 'cd $(mktemp -d) && git clone {'git@github.com:phisch/dotfiles.git' if github_access_token else 'https://github.com/phisch/dotfiles.git'} . && cp -rb . ~'")

            i.arch_chroot(r"sed -i 's/#\(MAKEFLAGS=\).*/\1\"-j$(($(nproc)-2))\"/' /etc/makepkg.conf")
            i.arch_chroot(r"sed -i 's/# \(%wheel ALL=(ALL) NOPASSWD: ALL\)/\1/' /etc/sudoers")
            i.arch_chroot(f"su {user} -c 'cd $(mktemp -d) && git clone https://aur.archlinux.org/paru-bin.git . && makepkg -sim --noconfirm'")
            i.arch_chroot(f'su {user} -c "paru -S --needed --noconfirm {" ".join(dependencies_aur)}"')
            i.arch_chroot(r"sed -i 's/\(%wheel ALL=(ALL) NOPASSWD: ALL\)/# \1/' /etc/sudoers")

            archinstall.reboot()

except archinstall.DiskError as e:
    print(str(e))
except IndexError as e:
    print('The selected index does not exist.')
except archinstall.RequirementError as e:
    print(f"The package dependencies contain packages that don't exist.\n{str(e)}")
